# -*- coding: utf-8 -*-
"""web3method.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_bBg2XBvsAFOqPE6mEsnbLBBf3gaK_gA
"""

!pip install web3

!pip install graphqlclient

!pip install requests

from web3 import Web3
from datetime import datetime, timedelta

w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/aabd7793607f44c495238000d48a1b82'))

print(w3.eth.block_number) #Check if the notebook is connected to the Infura node
print(w3.__dict__)


# Check connection
print(w3.is_connected())

uniswap_v2_factory_address = Web3.to_checksum_address('0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f')

uniswap_v2_factory_abi = """[{"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":false,"internalType":"address","name":"pair","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"PairCreated","type":"event"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allPairs","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"allPairsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feeTo","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"feeToSetter","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"getPair","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_feeTo","type":"address"}],"name":"setFeeTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],"name":"setFeeToSetter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]"""

factory_contract = w3.eth.contract(address=uniswap_v2_factory_address, abi=uniswap_v2_factory_abi)

pair_created_events = factory_contract.events.PairCreated.get_logs(fromBlock=10000835, toBlock=10112000)

from web3.middleware import geth_poa_middleware
import requests

def get_pair_data(pair_address):
    # Fetch ABI from Etherscan API
    api_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={pair_address}"
    response = requests.get(api_url)
    data = response.json()
    if data['status'] == '1':
        pair_abi = data['result']
    else:
        raise Exception(f"Failed to fetch ABI: {data['message']}")

    # Initialize Web3 with an Infura provider
    web3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/aabd7793607f44c495238000d48a1b82'))
    web3.middleware_onion.inject(geth_poa_middleware, layer=0)

    # Instantiate the pair contract
    pair_contract = web3.eth.contract(address=pair_address, abi=pair_abi)

    # Retrieve data from the pair contract
    pair_data = {
        "pair_address": pair_address,
        "token0": pair_contract.functions.token0().call(),
        "token1": pair_contract.functions.token1().call(),
        "reserve0": pair_contract.functions.getReserves().call()[0],
        "reserve1": pair_contract.functions.getReserves().call()[1],
        "total_supply": pair_contract.functions.totalSupply().call(),
        # Add more data points as needed
    }

    return pair_data

def get_token_info(token_address):
    # Fetch ABI from Etherscan API
    api_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={token_address}"
    response = requests.get(api_url)
    data = response.json()
    if data['status'] == '1':
        abi = data['result']
    else:
        raise Exception(f"Failed to fetch ABI: {data['message']}")

    print(abi)

    # Initialize Web3 with an Infura provider
    web3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/aabd7793607f44c495238000d48a1b82'))
    web3.middleware_onion.inject(geth_poa_middleware, layer=0)

    # Instantiate contract
    token_contract = web3.eth.contract(address=web3.to_checksum_address(token_address), abi=abi)

    # Fetch token information
    name = token_contract.functions.name().call()
    symbol = token_contract.functions.symbol().call()
    decimals = token_contract.functions.decimals().call()
    total_supply_wei = token_contract.functions.totalSupply().call()

    # Convert total supply from wei to the token's decimals
    total_supply = total_supply_wei / (10 ** decimals)

    token_data = {
        'name': name,
        'symbol': symbol,
        'decimals': decimals,
        'total_supply': total_supply
    }

    return token_data

pair_address = "0x55D5c232D921B9eAA6b37b5845E439aCD04b4DBa"
pair_data = get_pair_data(pair_address)
print(pair_data)

token1_address = str(pair_data.get('token1'))
token1_info = get_token_info('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
print("Token1 Information:")
print(token1_info)

for event in pair_created_events:
  pair_address = str(event['args']['pair'])
  print(pair_address)
  t0_address = str(event['args']['token0'])
  print(t0_address)
  t1_address = str(event['args']['token1'])
  print(t1_address)
  try:
    pair_data = get_pair_data(pair_address)
    print(pair_data)
  except:
    print(f"Error processing event--pair data")
  try:
    t0_data = get_token_info(t0_address)
    print(t0_data)
  except:
    print(f"Error processing event--token 0")
  try:
    t1_data = get_token_info(t1_address)
    print(t1_data)
  except:
    print(f"Error processing event - token 1")

for event in pair_created_events:
  t0_address = str(event['args']['token0'])
  print(t0_address)

  try:
    t0_data = get_token_info(t0_address)
    print(t0_data)
  except:
    print(f"Error processing event--token 0")